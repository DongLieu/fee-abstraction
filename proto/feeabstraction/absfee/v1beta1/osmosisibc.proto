syntax = "proto3";
package feeabstraction.absfee.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/notional-labs/feeabstraction/v1/x/feeabs/types";


message FeeabsIbcPacketData {
	oneof packet {
		NoData noData = 1;
		SwapAmountInRoute ibcSwapAmountInRoute = 2;
		OsmosisQuerySpotPriceRequestPacketData ibcOsmosisQuerySpotPriceRequestPacketData = 3;
	}
}

message NoData {}

// TODO : add more details for this message
message SwapAmountInRoute {
	uint64 pool_id   = 1;
	string token_out_denom = 2;
}

// TODO : add more details for this message
message OsmosisQueryRequestPacketData  {
	uint64 pool_id = 1;
	string token_in = 2;
	repeated SwapAmountInRoute routes = 3 [(gogoproto.nullable) = false];
}

message OsmosisQuerySpotPriceRequestPacketData {
	uint64 pool_id = 1;
	string base_asset_denom = 2;
	string quote_asset_denom = 3;
}

message HostChainFeeAbsConfig{
    // ibc token is allowed to be used as fee token 
    string ibc_denom = 1 
    [(gogoproto.moretags) = "yaml:\"allowed_token\"" ];
	
	// ibced native denom in osmosis dev
	string host_chain_native_denom_ibced_on_osmosis = 2;

	// middleware address in hostchain, can we refator this logic ?
	string middleware_address = 3;

    // transfer channel from customer_chain -> host chain
    string ibc_transfer_channel = 4;

	// transfer channel from host chain -> osmosis
	string host_zone_ibc_transfer_channel = 5;

	// crosschain-swap contract address 
	string crosschain_swap_address = 6;

	// pool id
    uint64 pool_id = 7;

    // Active
    bool active = 8;
}