// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeabstraction/absfee/v1beta1/osmosisibc.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeeabsIbcPacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*FeeabsIbcPacketData_NoData
	//	*FeeabsIbcPacketData_IbcSwapAmountInRoute
	//	*FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData
	Packet isFeeabsIbcPacketData_Packet `protobuf_oneof:"packet"`
}

func (m *FeeabsIbcPacketData) Reset()         { *m = FeeabsIbcPacketData{} }
func (m *FeeabsIbcPacketData) String() string { return proto.CompactTextString(m) }
func (*FeeabsIbcPacketData) ProtoMessage()    {}
func (*FeeabsIbcPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e956854d14a746, []int{0}
}
func (m *FeeabsIbcPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeabsIbcPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeabsIbcPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeabsIbcPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeabsIbcPacketData.Merge(m, src)
}
func (m *FeeabsIbcPacketData) XXX_Size() int {
	return m.Size()
}
func (m *FeeabsIbcPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeabsIbcPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_FeeabsIbcPacketData proto.InternalMessageInfo

type isFeeabsIbcPacketData_Packet interface {
	isFeeabsIbcPacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FeeabsIbcPacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}
type FeeabsIbcPacketData_IbcSwapAmountInRoute struct {
	IbcSwapAmountInRoute *SwapAmountInRoute `protobuf:"bytes,2,opt,name=ibcSwapAmountInRoute,proto3,oneof" json:"ibcSwapAmountInRoute,omitempty"`
}
type FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData struct {
	IbcOsmosisQuerySpotPriceRequestPacketData *OsmosisQuerySpotPriceRequestPacketData `protobuf:"bytes,3,opt,name=ibcOsmosisQuerySpotPriceRequestPacketData,proto3,oneof" json:"ibcOsmosisQuerySpotPriceRequestPacketData,omitempty"`
}

func (*FeeabsIbcPacketData_NoData) isFeeabsIbcPacketData_Packet()               {}
func (*FeeabsIbcPacketData_IbcSwapAmountInRoute) isFeeabsIbcPacketData_Packet() {}
func (*FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData) isFeeabsIbcPacketData_Packet() {
}

func (m *FeeabsIbcPacketData) GetPacket() isFeeabsIbcPacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *FeeabsIbcPacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*FeeabsIbcPacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

func (m *FeeabsIbcPacketData) GetIbcSwapAmountInRoute() *SwapAmountInRoute {
	if x, ok := m.GetPacket().(*FeeabsIbcPacketData_IbcSwapAmountInRoute); ok {
		return x.IbcSwapAmountInRoute
	}
	return nil
}

func (m *FeeabsIbcPacketData) GetIbcOsmosisQuerySpotPriceRequestPacketData() *OsmosisQuerySpotPriceRequestPacketData {
	if x, ok := m.GetPacket().(*FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData); ok {
		return x.IbcOsmosisQuerySpotPriceRequestPacketData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FeeabsIbcPacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FeeabsIbcPacketData_NoData)(nil),
		(*FeeabsIbcPacketData_IbcSwapAmountInRoute)(nil),
		(*FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e956854d14a746, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

// TODO : add more details for this message
type SwapAmountInRoute struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TokenOutDenom string `protobuf:"bytes,2,opt,name=token_out_denom,json=tokenOutDenom,proto3" json:"token_out_denom,omitempty"`
}

func (m *SwapAmountInRoute) Reset()         { *m = SwapAmountInRoute{} }
func (m *SwapAmountInRoute) String() string { return proto.CompactTextString(m) }
func (*SwapAmountInRoute) ProtoMessage()    {}
func (*SwapAmountInRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e956854d14a746, []int{2}
}
func (m *SwapAmountInRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapAmountInRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapAmountInRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapAmountInRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapAmountInRoute.Merge(m, src)
}
func (m *SwapAmountInRoute) XXX_Size() int {
	return m.Size()
}
func (m *SwapAmountInRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapAmountInRoute.DiscardUnknown(m)
}

var xxx_messageInfo_SwapAmountInRoute proto.InternalMessageInfo

func (m *SwapAmountInRoute) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *SwapAmountInRoute) GetTokenOutDenom() string {
	if m != nil {
		return m.TokenOutDenom
	}
	return ""
}

// TODO : add more details for this message
type OsmosisQueryRequestPacketData struct {
	PoolId  uint64              `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TokenIn string              `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	Routes  []SwapAmountInRoute `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes"`
}

func (m *OsmosisQueryRequestPacketData) Reset()         { *m = OsmosisQueryRequestPacketData{} }
func (m *OsmosisQueryRequestPacketData) String() string { return proto.CompactTextString(m) }
func (*OsmosisQueryRequestPacketData) ProtoMessage()    {}
func (*OsmosisQueryRequestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e956854d14a746, []int{3}
}
func (m *OsmosisQueryRequestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OsmosisQueryRequestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OsmosisQueryRequestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OsmosisQueryRequestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsmosisQueryRequestPacketData.Merge(m, src)
}
func (m *OsmosisQueryRequestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *OsmosisQueryRequestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_OsmosisQueryRequestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_OsmosisQueryRequestPacketData proto.InternalMessageInfo

func (m *OsmosisQueryRequestPacketData) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *OsmosisQueryRequestPacketData) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *OsmosisQueryRequestPacketData) GetRoutes() []SwapAmountInRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

type OsmosisQuerySpotPriceRequestPacketData struct {
	PoolId          uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BaseAssetDenom  string `protobuf:"bytes,2,opt,name=base_asset_denom,json=baseAssetDenom,proto3" json:"base_asset_denom,omitempty"`
	QuoteAssetDenom string `protobuf:"bytes,3,opt,name=quote_asset_denom,json=quoteAssetDenom,proto3" json:"quote_asset_denom,omitempty"`
}

func (m *OsmosisQuerySpotPriceRequestPacketData) Reset() {
	*m = OsmosisQuerySpotPriceRequestPacketData{}
}
func (m *OsmosisQuerySpotPriceRequestPacketData) String() string { return proto.CompactTextString(m) }
func (*OsmosisQuerySpotPriceRequestPacketData) ProtoMessage()    {}
func (*OsmosisQuerySpotPriceRequestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e956854d14a746, []int{4}
}
func (m *OsmosisQuerySpotPriceRequestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OsmosisQuerySpotPriceRequestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OsmosisQuerySpotPriceRequestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OsmosisQuerySpotPriceRequestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsmosisQuerySpotPriceRequestPacketData.Merge(m, src)
}
func (m *OsmosisQuerySpotPriceRequestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *OsmosisQuerySpotPriceRequestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_OsmosisQuerySpotPriceRequestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_OsmosisQuerySpotPriceRequestPacketData proto.InternalMessageInfo

func (m *OsmosisQuerySpotPriceRequestPacketData) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *OsmosisQuerySpotPriceRequestPacketData) GetBaseAssetDenom() string {
	if m != nil {
		return m.BaseAssetDenom
	}
	return ""
}

func (m *OsmosisQuerySpotPriceRequestPacketData) GetQuoteAssetDenom() string {
	if m != nil {
		return m.QuoteAssetDenom
	}
	return ""
}

type HostChainFeeAbsConfig struct {
	// ibc token is allowed to be used as fee token
	IbcDenom string `protobuf:"bytes,1,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty" yaml:"allowed_token"`
	// ibced native denom in osmosis dev
	HostChainNativeDenomIbcedOnOsmosis string `protobuf:"bytes,2,opt,name=host_chain_native_denom_ibced_on_osmosis,json=hostChainNativeDenomIbcedOnOsmosis,proto3" json:"host_chain_native_denom_ibced_on_osmosis,omitempty"`
	// middleware address in hostchain, can we refator this logic ?
	MiddlewareAddress string `protobuf:"bytes,3,opt,name=middleware_address,json=middlewareAddress,proto3" json:"middleware_address,omitempty"`
	// transfer channel from customer_chain -> host chain
	IbcTransferChannel string `protobuf:"bytes,4,opt,name=ibc_transfer_channel,json=ibcTransferChannel,proto3" json:"ibc_transfer_channel,omitempty"`
	// transfer channel from host chain -> osmosis
	HostZoneIbcTransferChannel string `protobuf:"bytes,5,opt,name=host_zone_ibc_transfer_channel,json=hostZoneIbcTransferChannel,proto3" json:"host_zone_ibc_transfer_channel,omitempty"`
	// crosschain-swap contract address
	CrosschainSwapAddress string `protobuf:"bytes,6,opt,name=crosschain_swap_address,json=crosschainSwapAddress,proto3" json:"crosschain_swap_address,omitempty"`
	// pool id
	PoolId uint64 `protobuf:"varint,7,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Active
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *HostChainFeeAbsConfig) Reset()         { *m = HostChainFeeAbsConfig{} }
func (m *HostChainFeeAbsConfig) String() string { return proto.CompactTextString(m) }
func (*HostChainFeeAbsConfig) ProtoMessage()    {}
func (*HostChainFeeAbsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e956854d14a746, []int{5}
}
func (m *HostChainFeeAbsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostChainFeeAbsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostChainFeeAbsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostChainFeeAbsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostChainFeeAbsConfig.Merge(m, src)
}
func (m *HostChainFeeAbsConfig) XXX_Size() int {
	return m.Size()
}
func (m *HostChainFeeAbsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HostChainFeeAbsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HostChainFeeAbsConfig proto.InternalMessageInfo

func (m *HostChainFeeAbsConfig) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetHostChainNativeDenomIbcedOnOsmosis() string {
	if m != nil {
		return m.HostChainNativeDenomIbcedOnOsmosis
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetMiddlewareAddress() string {
	if m != nil {
		return m.MiddlewareAddress
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetIbcTransferChannel() string {
	if m != nil {
		return m.IbcTransferChannel
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetHostZoneIbcTransferChannel() string {
	if m != nil {
		return m.HostZoneIbcTransferChannel
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetCrosschainSwapAddress() string {
	if m != nil {
		return m.CrosschainSwapAddress
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *HostChainFeeAbsConfig) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func init() {
	proto.RegisterType((*FeeabsIbcPacketData)(nil), "feeabstraction.absfee.v1beta1.FeeabsIbcPacketData")
	proto.RegisterType((*NoData)(nil), "feeabstraction.absfee.v1beta1.NoData")
	proto.RegisterType((*SwapAmountInRoute)(nil), "feeabstraction.absfee.v1beta1.SwapAmountInRoute")
	proto.RegisterType((*OsmosisQueryRequestPacketData)(nil), "feeabstraction.absfee.v1beta1.OsmosisQueryRequestPacketData")
	proto.RegisterType((*OsmosisQuerySpotPriceRequestPacketData)(nil), "feeabstraction.absfee.v1beta1.OsmosisQuerySpotPriceRequestPacketData")
	proto.RegisterType((*HostChainFeeAbsConfig)(nil), "feeabstraction.absfee.v1beta1.HostChainFeeAbsConfig")
}

func init() {
	proto.RegisterFile("feeabstraction/absfee/v1beta1/osmosisibc.proto", fileDescriptor_d7e956854d14a746)
}

var fileDescriptor_d7e956854d14a746 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x8d, 0x09, 0xcf, 0x84, 0x79, 0x7a, 0x8f, 0x87, 0x1f, 0x3c, 0xf2, 0x50, 0x09, 0xc8, 0x52,
	0x51, 0x5a, 0x89, 0x18, 0x5a, 0xb5, 0x52, 0xbb, 0xa9, 0x12, 0x28, 0x4a, 0x36, 0x40, 0x0d, 0x2b,
	0x36, 0xd6, 0x8c, 0x7d, 0x93, 0x8c, 0x70, 0xe6, 0x1a, 0xcf, 0x38, 0x29, 0xfd, 0x8a, 0xee, 0xfa,
	0x01, 0x55, 0x7f, 0xa0, 0x5f, 0xc1, 0x92, 0x65, 0x57, 0xa8, 0x82, 0x1f, 0xa8, 0xfa, 0x05, 0x95,
	0xc7, 0x6e, 0x43, 0x1a, 0x28, 0xa8, 0x3b, 0xcf, 0xbd, 0xe7, 0x9c, 0x7b, 0xe6, 0xcc, 0x78, 0x48,
	0xad, 0x0d, 0x40, 0x99, 0x54, 0x31, 0xf5, 0x15, 0x47, 0xe1, 0x50, 0x26, 0xdb, 0x00, 0x4e, 0x7f,
	0x83, 0x81, 0xa2, 0x1b, 0x0e, 0xca, 0x1e, 0x4a, 0x2e, 0x39, 0xf3, 0x6b, 0x51, 0x8c, 0x0a, 0xad,
	0xa5, 0x51, 0x7c, 0x2d, 0xc3, 0xd7, 0x72, 0xfc, 0xe2, 0x5c, 0x07, 0x3b, 0xa8, 0x91, 0x4e, 0xfa,
	0x95, 0x91, 0x16, 0xef, 0x75, 0x10, 0x3b, 0x21, 0x38, 0x34, 0xe2, 0x0e, 0x15, 0x02, 0x15, 0x4d,
	0xb9, 0x32, 0xeb, 0xda, 0x5f, 0x26, 0xc8, 0xbf, 0xdb, 0x5a, 0xb5, 0xc5, 0xfc, 0x3d, 0xea, 0x1f,
	0x81, 0xda, 0xa2, 0x8a, 0x5a, 0x2f, 0x88, 0x29, 0x30, 0xfd, 0x2a, 0x1b, 0x2b, 0x46, 0xf5, 0xcf,
	0x47, 0xf7, 0x6b, 0xbf, 0x9c, 0x5d, 0xdb, 0xd1, 0xe0, 0x66, 0xc1, 0xcd, 0x69, 0x56, 0x9b, 0xcc,
	0x71, 0xe6, 0xef, 0x0f, 0x68, 0x54, 0xef, 0x61, 0x22, 0x54, 0x4b, 0xb8, 0x98, 0x28, 0x28, 0x4f,
	0x68, 0xb9, 0xf5, 0x5b, 0xe4, 0xc6, 0x78, 0xcd, 0x82, 0x7b, 0xad, 0x9e, 0xf5, 0xc1, 0x20, 0x0f,
	0x38, 0xf3, 0x77, 0xb3, 0xac, 0x5e, 0x25, 0x10, 0x9f, 0xec, 0x47, 0xa8, 0xf6, 0x62, 0xee, 0x83,
	0x0b, 0xc7, 0x09, 0x48, 0x35, 0xdc, 0x56, 0xb9, 0xa8, 0xa7, 0xbf, 0xbc, 0x65, 0xfa, 0xdd, 0xc4,
	0x9a, 0x05, 0xf7, 0xee, 0x93, 0x1b, 0x25, 0x62, 0x46, 0x7a, 0x65, 0x97, 0x88, 0x99, 0xa5, 0x65,
	0x1f, 0x90, 0xd9, 0xf1, 0x0d, 0x2d, 0x90, 0xa9, 0x08, 0x31, 0xf4, 0x78, 0xa0, 0xa3, 0x9f, 0x74,
	0xcd, 0x74, 0xd9, 0x0a, 0xac, 0x55, 0x32, 0xa3, 0xf0, 0x08, 0x84, 0x87, 0x89, 0xf2, 0x02, 0x10,
	0xd8, 0xd3, 0x61, 0x4e, 0xbb, 0x7f, 0xe9, 0xf2, 0x6e, 0xa2, 0xb6, 0xd2, 0xa2, 0xfd, 0xde, 0x20,
	0x4b, 0x57, 0x4d, 0x8d, 0x79, 0xb9, 0x79, 0xc4, 0xff, 0xa4, 0x94, 0x8d, 0xe0, 0x22, 0xd7, 0x9e,
	0xd2, 0xeb, 0x96, 0xb0, 0x76, 0x88, 0x19, 0xa7, 0xfe, 0x64, 0xb9, 0xb8, 0x52, 0xfc, 0x9d, 0x13,
	0x6c, 0x4c, 0x9e, 0x9e, 0x2f, 0x17, 0xdc, 0x5c, 0xc5, 0x7e, 0x67, 0x90, 0xd5, 0xbb, 0x45, 0x77,
	0xb3, 0xdd, 0x2a, 0xf9, 0x87, 0x51, 0x09, 0x1e, 0x95, 0x12, 0x46, 0x23, 0xf9, 0x3b, 0xad, 0xd7,
	0xd3, 0xb2, 0xce, 0xc4, 0x7a, 0x48, 0x66, 0x8f, 0x13, 0x54, 0xa3, 0xd0, 0xa2, 0x86, 0xce, 0xe8,
	0xc6, 0x10, 0x6b, 0x7f, 0x2c, 0x92, 0xf9, 0x26, 0x4a, 0xb5, 0xd9, 0xa5, 0x5c, 0x6c, 0x03, 0xd4,
	0x99, 0xdc, 0x44, 0xd1, 0xe6, 0x1d, 0xeb, 0x09, 0x99, 0xe6, 0xcc, 0xcf, 0xd9, 0xa9, 0x95, 0xe9,
	0x46, 0xf9, 0xeb, 0xf9, 0xf2, 0xdc, 0x09, 0xed, 0x85, 0xcf, 0x6d, 0x1a, 0x86, 0x38, 0x80, 0xc0,
	0xd3, 0x89, 0xd9, 0x6e, 0x89, 0x33, 0x3f, 0x1b, 0x7e, 0x40, 0xaa, 0x5d, 0x94, 0xca, 0xf3, 0x53,
	0x41, 0x4f, 0x50, 0xc5, 0xfb, 0x90, 0x89, 0x78, 0x9c, 0xf9, 0x10, 0x78, 0x28, 0xbc, 0xfc, 0x5f,
	0xcf, 0xed, 0xdb, 0xdd, 0xef, 0xf3, 0x77, 0x34, 0x5a, 0xeb, 0xb4, 0x52, 0xec, 0xae, 0xc8, 0x43,
	0xb3, 0xd6, 0x88, 0xd5, 0xe3, 0x41, 0x10, 0xc2, 0x80, 0xc6, 0xe0, 0xd1, 0x20, 0x88, 0x41, 0xca,
	0x7c, 0x4f, 0xb3, 0xc3, 0x4e, 0x3d, 0x6b, 0x58, 0xeb, 0xfa, 0x7f, 0xf4, 0x54, 0x4c, 0x85, 0x6c,
	0x43, 0x9c, 0x9a, 0x11, 0x02, 0xc2, 0xf2, 0xa4, 0x26, 0x58, 0x9c, 0xf9, 0x07, 0x79, 0x6b, 0x33,
	0xeb, 0x58, 0x0d, 0x52, 0xd1, 0xb6, 0xdf, 0xa0, 0x00, 0xef, 0x5a, 0xee, 0x1f, 0x9a, 0xbb, 0x98,
	0xa2, 0x0e, 0x51, 0x40, 0x6b, 0x5c, 0xe3, 0x29, 0x59, 0xf0, 0x63, 0x94, 0x32, 0xdb, 0xba, 0x1c,
	0xd0, 0xe8, 0x87, 0x53, 0x53, 0x93, 0xe7, 0x87, 0x6d, 0x7d, 0x63, 0x72, 0xb7, 0x57, 0x8e, 0x7c,
	0x6a, 0xe4, 0xc8, 0xff, 0x23, 0x66, 0x7a, 0xdf, 0xfa, 0x50, 0x2e, 0xad, 0x18, 0xd5, 0x92, 0x9b,
	0xaf, 0x1a, 0xfb, 0xa7, 0x17, 0x15, 0xe3, 0xec, 0xa2, 0x62, 0x7c, 0xbe, 0xa8, 0x18, 0x6f, 0x2f,
	0x2b, 0x85, 0xb3, 0xcb, 0x4a, 0xe1, 0xd3, 0x65, 0xa5, 0x70, 0xf8, 0xac, 0xc3, 0x55, 0x37, 0x61,
	0x35, 0x1f, 0x7b, 0x8e, 0xc0, 0xf4, 0xaa, 0xd2, 0x70, 0x2d, 0xa4, 0x4c, 0x3a, 0x3f, 0xbd, 0xbe,
	0xfd, 0x0d, 0xe7, 0x75, 0x5e, 0x73, 0xd4, 0x49, 0x04, 0x92, 0x99, 0xfa, 0x8d, 0x7c, 0xfc, 0x2d,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0xc6, 0x71, 0xfd, 0xa8, 0x05, 0x00, 0x00,
}

func (m *FeeabsIbcPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeabsIbcPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeabsIbcPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeabsIbcPacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeabsIbcPacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *FeeabsIbcPacketData_IbcSwapAmountInRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeabsIbcPacketData_IbcSwapAmountInRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcSwapAmountInRoute != nil {
		{
			size, err := m.IbcSwapAmountInRoute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IbcOsmosisQuerySpotPriceRequestPacketData != nil {
		{
			size, err := m.IbcOsmosisQuerySpotPriceRequestPacketData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SwapAmountInRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapAmountInRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapAmountInRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutDenom) > 0 {
		i -= len(m.TokenOutDenom)
		copy(dAtA[i:], m.TokenOutDenom)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.TokenOutDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintOsmosisibc(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OsmosisQueryRequestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsmosisQueryRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OsmosisQueryRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintOsmosisibc(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OsmosisQuerySpotPriceRequestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsmosisQuerySpotPriceRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OsmosisQuerySpotPriceRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteAssetDenom) > 0 {
		i -= len(m.QuoteAssetDenom)
		copy(dAtA[i:], m.QuoteAssetDenom)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.QuoteAssetDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseAssetDenom) > 0 {
		i -= len(m.BaseAssetDenom)
		copy(dAtA[i:], m.BaseAssetDenom)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.BaseAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintOsmosisibc(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HostChainFeeAbsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostChainFeeAbsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostChainFeeAbsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.PoolId != 0 {
		i = encodeVarintOsmosisibc(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CrosschainSwapAddress) > 0 {
		i -= len(m.CrosschainSwapAddress)
		copy(dAtA[i:], m.CrosschainSwapAddress)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.CrosschainSwapAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HostZoneIbcTransferChannel) > 0 {
		i -= len(m.HostZoneIbcTransferChannel)
		copy(dAtA[i:], m.HostZoneIbcTransferChannel)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.HostZoneIbcTransferChannel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IbcTransferChannel) > 0 {
		i -= len(m.IbcTransferChannel)
		copy(dAtA[i:], m.IbcTransferChannel)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.IbcTransferChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MiddlewareAddress) > 0 {
		i -= len(m.MiddlewareAddress)
		copy(dAtA[i:], m.MiddlewareAddress)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.MiddlewareAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HostChainNativeDenomIbcedOnOsmosis) > 0 {
		i -= len(m.HostChainNativeDenomIbcedOnOsmosis)
		copy(dAtA[i:], m.HostChainNativeDenomIbcedOnOsmosis)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.HostChainNativeDenomIbcedOnOsmosis)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOsmosisibc(dAtA []byte, offset int, v uint64) int {
	offset -= sovOsmosisibc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeabsIbcPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *FeeabsIbcPacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}
func (m *FeeabsIbcPacketData_IbcSwapAmountInRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcSwapAmountInRoute != nil {
		l = m.IbcSwapAmountInRoute.Size()
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}
func (m *FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IbcOsmosisQuerySpotPriceRequestPacketData != nil {
		l = m.IbcOsmosisQuerySpotPriceRequestPacketData.Size()
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SwapAmountInRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovOsmosisibc(uint64(m.PoolId))
	}
	l = len(m.TokenOutDenom)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}

func (m *OsmosisQueryRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovOsmosisibc(uint64(m.PoolId))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovOsmosisibc(uint64(l))
		}
	}
	return n
}

func (m *OsmosisQuerySpotPriceRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovOsmosisibc(uint64(m.PoolId))
	}
	l = len(m.BaseAssetDenom)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.QuoteAssetDenom)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}

func (m *HostChainFeeAbsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.HostChainNativeDenomIbcedOnOsmosis)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.MiddlewareAddress)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.IbcTransferChannel)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.HostZoneIbcTransferChannel)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.CrosschainSwapAddress)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovOsmosisibc(uint64(m.PoolId))
	}
	if m.Active {
		n += 2
	}
	return n
}

func sovOsmosisibc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOsmosisibc(x uint64) (n int) {
	return sovOsmosisibc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeabsIbcPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeabsIbcPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeabsIbcPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &FeeabsIbcPacketData_NoData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSwapAmountInRoute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SwapAmountInRoute{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &FeeabsIbcPacketData_IbcSwapAmountInRoute{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcOsmosisQuerySpotPriceRequestPacketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OsmosisQuerySpotPriceRequestPacketData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &FeeabsIbcPacketData_IbcOsmosisQuerySpotPriceRequestPacketData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapAmountInRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapAmountInRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapAmountInRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsmosisQueryRequestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsmosisQueryRequestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsmosisQueryRequestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, SwapAmountInRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsmosisQuerySpotPriceRequestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsmosisQuerySpotPriceRequestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsmosisQuerySpotPriceRequestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostChainFeeAbsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostChainFeeAbsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostChainFeeAbsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChainNativeDenomIbcedOnOsmosis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostChainNativeDenomIbcedOnOsmosis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddlewareAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddlewareAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTransferChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcTransferChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneIbcTransferChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneIbcTransferChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainSwapAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CrosschainSwapAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOsmosisibc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOsmosisibc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOsmosisibc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOsmosisibc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOsmosisibc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOsmosisibc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOsmosisibc = fmt.Errorf("proto: unexpected end of group")
)
